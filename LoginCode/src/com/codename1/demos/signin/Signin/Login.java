 package com.codename1.demos.signin.Signin;


import static com.codename1.ui.CN.addNetworkErrorListener;
import static com.codename1.ui.CN.getCurrentForm;
import static com.codename1.ui.CN.updateNetworkThreadCount;

import com.codename1.io.Log;
import com.codename1.io.Storage;
import com.codename1.ui.Button;
import com.codename1.ui.Dialog;
import com.codename1.ui.Form;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Login {

    private Form current;
    private Resources theme;
    String nom="";

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Sauvegarde - Storage", BoxLayout.y());
        Storage s = Storage.getInstance();
        String monT=(String)s.readObject("monNom");
        final TextField username = new TextField(monT);
        //username.setHint("Username");
        final Button enregistrer = new Button("Enregistrer");
        final Button afficher = new Button("Afficher");
        final Button effacer = new Button("Effacer");
        
        enregistrer.addActionListener((ActionListener)(ActionEvent e) -> {
        	s.writeObject("monNom", username.getText());
        });
        
        afficher.addActionListener((ActionListener)(ActionEvent e) -> {
        	nom = (String)s.readObject("monNom");
        });
        
        effacer.addActionListener((ActionListener)(ActionEvent e) -> {
        	s.deleteStorageFile("monNom");
        });
        
        hi.add(username);
        hi.add(enregistrer);
        hi.add(afficher);
        hi.add(effacer);
        hi.show();
        //9:17
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
