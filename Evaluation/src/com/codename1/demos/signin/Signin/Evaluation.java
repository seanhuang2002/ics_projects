package com.codename1.demos.signin.Signin;


import static com.codename1.ui.CN.addNetworkErrorListener;
import static com.codename1.ui.CN.updateNetworkThreadCount;

import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Evaluation {

    private Form mainForm;
    private Resources theme;

    public void init(Object context) {
    	System.out.println("1");
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
    	mainForm = new Form("Welcome!");
    	mainForm.setLayout(new BorderLayout());
    	Container center = new Container(new BoxLayout(BoxLayout.Y_AXIS));
    	center.setUIID("ContainerWithPadding");
    	
    	Image logo = theme.getImage("mLogo.png");
    	Label l = new Label(logo);
    	Container flow = new Container(new FlowLayout(Component.CENTER));
    	flow.addComponent(l);
    	center.addComponent(flow);
    	
    	final Button createStudent = new Button("Create Student Profile");
    	createStudent.addActionListener((ActionListener)(ActionEvent evt)->{});
    	final Button addEntry = new Button("Add Marks to Profile");
    	addEntry.addActionListener((ActionListener)(ActionEvent evt)->{});
    	final Button viewEntry = new Button("View Marks by Student");
    	viewEntry.addActionListener((ActionListener)(ActionEvent evt)->{});
    	final Button allEntry = new Button("View All Marks");
    	allEntry.addActionListener((ActionListener)(ActionEvent evt)->{});
    	final Button about = new Button("About this App");
    	about.addActionListener((ActionListener)(ActionEvent evt)->{});
    	
    	center.addComponent(createStudent);
    	center.addComponent(addEntry);
    	center.addComponent(viewEntry);
    	center.addComponent(allEntry);
    	center.addComponent(about);
    	mainForm.getToolbar().addCommandToLeftSideMenu("Home", null, e ->{});
    	mainForm.getToolbar().addCommandToOverflowMenu("Home", null, e ->{});
    	mainForm.addComponent(BorderLayout.CENTER, center);
    	mainForm.show();
    }

    public void stop() {
    }
    
    public void destroy() {
    }

}
